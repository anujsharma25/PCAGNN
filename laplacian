def compute_laplacian(edge_index, num_nodes):
    """
    Compute the graph Laplacian matrix L = D - A, where D is the degree matrix
    and A is the adjacency matrix, given an edge index representation.

    Args:
        edge_index (list of tuples): List of [source, target] edges, where each
                                    source and target is a node index (0-based).
        num_nodes (int): Number of nodes in the graph.

    Returns:
        list of lists: The Laplacian matrix L as a 2D list of size num_nodes x num_nodes.
    """
    # Initialize adjacency matrix A as num_nodes x num_nodes matrix of zeros
    adj = [[0] * num_nodes for _ in range(num_nodes)]
    
    # Populate adjacency matrix from edge_index
    for src, dst in edge_index:
        if 0 <= src < num_nodes and 0 <= dst < num_nodes:
            adj[src][dst] = 1
            adj[dst][src] = 1  # Assuming undirected graph
    
    # Compute degree for each node (sum of each row in adjacency matrix)
    degree = [sum(row) for row in adj]
    
    # Create degree matrix D (diagonal matrix with degrees)
    D = [[degree[i] if i == j else 0 for j in range(num_nodes)] for i in range(num_nodes)]
    
    # Compute Laplacian L = D - A
    L = [[D[i][j] - adj[i][j] for j in range(num_nodes)] for i in range(num_nodes)]
    
    return L

def print_matrix(matrix, name="Matrix"):
    """
    Utility function to print a matrix in a readable format.

    Args:
        matrix (list of lists): The matrix to print.
        name (str): Name of the matrix for display.
    """
    print(f"{name}:")
    for row in matrix:
        print([f"{x:3d}" for x in row])
    print()

# Example usage and testing
if __name__ == "__main__":
    # Example: A simple undirected graph with 4 nodes
    # Edges: 0-1, 1-2, 2-3
    example_edge_index = [(0, 1), (1, 2), (2, 3)]
    num_nodes = 4
    
    # Compute Laplacian
    laplacian = compute_laplacian(example_edge_index, num_nodes)
    
    # Print the result
    print_matrix(laplacian, "Laplacian Matrix")
    
    # For verification, compute and print adjacency and degree matrices
    adj = [[0] * num_nodes for _ in range(num_nodes)]
    for src, dst in example_edge_index:
        adj[src][dst] = 1
        adj[dst][src] = 1
    degree = [sum(row) for row in adj]
    D = [[degree[i] if i == j else 0 for j in range(num_nodes)] for i in range(num_nodes)]
    
    print_matrix(adj, "Adjacency Matrix")
    print_matrix(D, "Degree Matrix")
